// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  email                  String                  @unique
  password               String
  name                   String
  phone                  String?
  imageUrl               String?
  bio                    String?
  createdBands           Band[]                  @relation("BandCreator")
  bandMemberships        BandMember[]
  createdRehearsals      Rehearsal[]             @relation("RehearsalCreator")
  availabilityResponses  Availability[]
  attendance             Attendance[]
  equipmentResponsibility RehearsalEquipment[]
  notificationPreferences NotificationPreference?
  notifications          Notification[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt

  @@map("users")
}

model Band {
  id          String       @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  createdBy   User         @relation("BandCreator", fields: [createdById], references: [id])
  createdById String
  members     BandMember[]
  rehearsals  Rehearsal[]
  songs       Song[]
  equipment   Equipment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("bands")
}

model BandMember {
  id       String     @id @default(uuid())
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  band     Band       @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId   String
  role     MemberRole @default(MEMBER)
  joinDate DateTime   @default(now())
  status   MemberStatus @default(PENDING)

  @@unique([userId, bandId])
  @@map("band_members")
}

model Rehearsal {
  id          String       @id @default(uuid())
  band        Band         @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  status      RehearsalStatus @default(PROPOSED)
  createdBy   User         @relation("RehearsalCreator", fields: [createdById], references: [id])
  createdById String
  availability Availability[]
  attendance  Attendance[]
  setlists    Setlist[]
  equipment   RehearsalEquipment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("rehearsals")
}

model Availability {
  id           String             @id @default(uuid())
  rehearsal    Rehearsal          @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  rehearsalId  String
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  status       AvailabilityStatus
  responseTime DateTime           @default(now())

  @@unique([rehearsalId, userId])
  @@map("availability")
}

model Attendance {
  id          String           @id @default(uuid())
  rehearsal   Rehearsal        @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  rehearsalId String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  status      AttendanceStatus
  notes       String?
  checkedInAt DateTime?

  @@unique([rehearsalId, userId])
  @@map("attendance")
}

model Setlist {
  id          String        @id @default(uuid())
  rehearsal   Rehearsal     @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  rehearsalId String
  name        String
  notes       String?
  songs       SetlistSong[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("setlists")
}

model Song {
  id       String        @id @default(uuid())
  band     Band          @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId   String
  title    String
  artist   String?
  notes    String?
  duration Int?          // in seconds
  status   SongStatus    @default(NEW)
  setlists SetlistSong[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("songs")
}

model SetlistSong {
  id        String   @id @default(uuid())
  setlist   Setlist  @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  setlistId String
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    String
  order     Int
  notes     String?

  @@unique([setlistId, songId])
  @@map("setlist_songs")
}

model Equipment {
  id           String               @id @default(uuid())
  band         Band                 @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId       String
  name         String
  category     String?
  notes        String?
  rehearsals   RehearsalEquipment[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("equipment")
}

model RehearsalEquipment {
  id          String           @id @default(uuid())
  rehearsal   Rehearsal        @relation(fields: [rehearsalId], references: [id], onDelete: Cascade)
  rehearsalId String
  equipment   Equipment        @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId String
  user        User?            @relation(fields: [userId], references: [id])
  userId      String?
  status      EquipmentStatus

  @@unique([rehearsalId, equipmentId])
  @@map("rehearsal_equipment")
}

model Notification {
  id         String           @id @default(uuid())
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       NotificationType
  content    String
  readStatus Boolean          @default(false)
  createdAt  DateTime         @default(now())

  @@map("notifications")
}

model NotificationPreference {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  emailEnabled Boolean  @default(true)
  pushEnabled  Boolean  @default(true)
  smsEnabled   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("notification_preferences")
}

// Enums
enum MemberRole {
  LEADER
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum RehearsalStatus {
  PROPOSED
  CONFIRMED
  CANCELED
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  TENTATIVE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum SongStatus {
  NEW
  IN_PROGRESS
  PERFORMANCE_READY
}

enum EquipmentStatus {
  WILL_BRING
  NEEDED
}

enum NotificationType {
  REHEARSAL_CREATED
  REHEARSAL_UPDATED
  REHEARSAL_CANCELED
  AVAILABILITY_REQUEST
  AVAILABILITY_REMINDER
  REHEARSAL_REMINDER
  BAND_INVITATION
  SETLIST_UPDATED
}