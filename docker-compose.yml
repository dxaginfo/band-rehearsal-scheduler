version: '3.8'

services:
  # Backend API Service
  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: rehearsal-api
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/rehearsal_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
      - PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    networks:
      - rehearsal-network

  # Frontend React Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: rehearsal-client
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "3000:80"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - rehearsal-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: rehearsal-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rehearsal_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rehearsal-network

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: rehearsal-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rehearsal-network

  # PgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: rehearsal-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - rehearsal-network

networks:
  rehearsal-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: